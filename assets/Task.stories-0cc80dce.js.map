{"version":3,"file":"Task.stories-0cc80dce.js","sources":["../../src/stories/Task.jsx"],"sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Task({ task: { id, title, state }, onArchiveTask, onPinTask }) {\n    return (\n        <div className={`list-item ${state}`}>\n            <label\n                htmlFor=\"checked\"\n                aria-label={`archiveTask-${id}`}\n                className=\"checkbox\"\n            >\n                <input\n                    type=\"checkbox\"\n                    disabled={true}\n                    name=\"checked\"\n                    id={`archiveTask-${id}`}\n                    checked={state === \"TASK_ARCHIVED\"}\n                />\n                <span\n                    className=\"checkbox-custom\"\n                    onClick={() => onArchiveTask(id)}\n                />\n            </label>\n\n            <label htmlFor=\"title\" aria-label={title} className=\"title\">\n                <input\n                    type=\"text\"\n                    value={title}\n                    readOnly={true}\n                    name=\"title\"\n                    placeholder=\"Input title\"\n                />\n            </label>\n\n            {state !== \"TASK_ARCHIVED\" && (\n                <button\n                    className=\"pin-button\"\n                    onClick={() => onPinTask(id)}\n                    id={`pinTask-${id}`}\n                    aria-label={`pinTask-${id}`}\n                    key={`pinTask-${id}`}\n                >\n                    <span className={`icon-star`} />\n                </button>\n            )}\n        </div>\n    );\n}\n\nTask.propTypes = {\n    /** Composition of the task */\n    task: PropTypes.shape({\n        /** Id of the task */\n        id: PropTypes.string.isRequired,\n        /** Title of the task */\n        title: PropTypes.string.isRequired,\n        /** Current state of the task */\n        state: PropTypes.string.isRequired,\n    }),\n    /** Event to change the task to archived */\n    onArchiveTask: PropTypes.func,\n    /** Event to change the task to pinned */\n    onPinTask: PropTypes.func,\n};"],"names":["Task","id","title","state","onArchiveTask","onPinTask","jsxs","jsx","PropTypes"],"mappings":"yHAIA,SAAAA,EAAA,CAAA,KAAA,CAAA,GAAAC,EAAA,MAAAC,EAAA,MAAAC,CAAA,EAAA,cAAAC,EAAA,UAAAC,GAAA,CACA,OACAC,EAAA,MAAA,CAAA,UAAA,aAAAH,IACA,SAAA,CAAAG,EAAA,QAAA,CACA,QAAA,UACA,aAAA,eAAAL,IACA,UAAA,WAEA,SAAA,CAAAM,EAAA,QAAA,CACA,KAAA,WACA,SAAA,GACA,KAAA,UACA,GAAA,eAAAN,IACA,QAAAE,IAAA,eAAA,CACA,EACAI,EAAA,OAAA,CACA,UAAA,kBACA,QAAA,IAAAH,EAAAH,CAAA,CAAA,CACA,CAAA,CAAA,CACA,IAEA,QAAA,CAAA,QAAA,QAAA,aAAAC,EAAA,UAAA,QACA,SAAAK,EAAA,QAAA,CACA,KAAA,OACA,MAAAL,EACA,SAAA,GACA,KAAA,QACA,YAAA,aAAA,CAAA,EAEA,EAEAC,IAAA,iBACAI,EAAA,SAAA,CACA,UAAA,aACA,QAAA,IAAAF,EAAAJ,CAAA,EACA,GAAA,WAAAA,IACA,aAAA,WAAAA,IAGA,SAAAM,EAAA,OAAA,CAAA,UAAA,YAAA,CAAA,EAFA,WAAAN,GAGA,CAEA,CAAA,CAAA,CAEA,CAEAD,EAAA,UAAA,CAEA,KAAAQ,EAAA,MAAA,CAEA,GAAAA,EAAA,OAAA,WAEA,MAAAA,EAAA,OAAA,WAEA,MAAAA,EAAA,OAAA,UAAA,CACA,EAEA,cAAAA,EAAA,KAEA,UAAAA,EAAA,IACA,EAAAR,EAAA,aAAA,CAAA,YAAA,GAAA,QAAA,CAAA,EAAA,YAAA,OAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,QAAA,MAAA,CAAA,GAAA,CAAA,KAAA,SAAA,YAAA,iBAAA,SAAA,EAAA,EAAA,MAAA,CAAA,KAAA,SAAA,YAAA,oBAAA,SAAA,IAAA,MAAA,CAAA,KAAA,SAAA,YAAA,4BAAA,SAAA,EAAA,EAAA,EAAA,SAAA,GAAA,YAAA,yBAAA,EAAA,cAAA,CAAA,KAAA,CAAA,KAAA,MAAA,EAAA,SAAA,GAAA,YAAA,sCAAA,EAAA,UAAA,CAAA,KAAA,CAAA,KAAA,MAAA,EAAA,SAAA,GAAA,YAAA,oCAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;"}